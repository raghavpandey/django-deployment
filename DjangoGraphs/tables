# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.IntegerField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.IntegerField()
    is_active = models.IntegerField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class LogTable(models.Model):
    user_id = models.IntegerField(db_column='User_id', primary_key=True)  # Field name made lowercase.
    user_name = models.CharField(db_column='User_name', max_length=150)  # Field name made lowercase.
    module_name = models.CharField(db_column='Module_name', max_length=100)  # Field name made lowercase.
    time_login = models.DateTimeField(db_column='Time_login')  # Field name made lowercase.
    logout_time = models.DateTimeField(db_column='LogOut_time', blank=True, null=True)  # Field name made lowercase.
    is_success = models.IntegerField(db_column='Is_success')  # Field name made lowercase.
    trk_ip_address = models.CharField(db_column='Trk_Ip_address', max_length=50)  # Field name made lowercase.
    action_date = models.DateTimeField(db_column='Action_date')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'log_table'


class LogTableBkp(models.Model):
    user_id = models.IntegerField(db_column='User_id')  # Field name made lowercase.
    user_name = models.CharField(db_column='User_name', max_length=150)  # Field name made lowercase.
    module_name = models.CharField(db_column='Module_name', max_length=100)  # Field name made lowercase.
    time_login = models.DateTimeField(db_column='Time_login')  # Field name made lowercase.
    logout_time = models.DateTimeField(db_column='LogOut_time', blank=True, null=True)  # Field name made lowercase.
    is_success = models.IntegerField(db_column='Is_success')  # Field name made lowercase.
    trk_ip_address = models.CharField(db_column='Trk_Ip_address', max_length=50)  # Field name made lowercase.
    action_date = models.DateTimeField(db_column='Action_date')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'log_table_bkp'


class Reviews(models.Model):
    user_name = models.CharField(max_length=200)
    age = models.IntegerField()
    comments = models.CharField(max_length=500)
    rate = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'reviews'


class SocMaster(models.Model):
    soc_id = models.IntegerField()
    soc_name = models.CharField(max_length=200)
    soc_addr = models.CharField(max_length=200)
    work_area = models.CharField(max_length=150)
    dist_id = models.IntegerField()
    dist_name = models.CharField(max_length=150)
    division_name = models.CharField(max_length=200)
    stype_name = models.CharField(max_length=150)
    reg_no = models.CharField(max_length=150)
    reg_date = models.DateField()
    ren_date = models.DateField()
    app_date = models.DateField()

    class Meta:
        managed = False
        db_table = 'soc_master'


class SocTable(models.Model):
    soc_id = models.IntegerField()
    soc_name = models.CharField(max_length=150)
    soc_addr = models.CharField(max_length=300)
    work_area = models.CharField(max_length=150)
    dist_id = models.IntegerField()
    dist_name = models.CharField(max_length=200)
    division_name = models.CharField(max_length=150, blank=True, null=True)
    stype_name = models.CharField(max_length=100)
    reg_no = models.CharField(max_length=200)
    reg_date = models.DateTimeField()
    ren_date = models.DateTimeField()
    app_date = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'soc_table'


class SocTableBkp(models.Model):
    id = models.IntegerField()
    soc_id = models.IntegerField()
    soc_name = models.CharField(max_length=150)
    soc_addr = models.CharField(max_length=300)
    work_area = models.CharField(max_length=150)
    dist_id = models.IntegerField()
    dist_name = models.CharField(max_length=200)
    division_name = models.CharField(max_length=150, blank=True, null=True)
    stype_name = models.CharField(max_length=100)
    reg_no = models.CharField(max_length=200)
    reg_date = models.DateTimeField()
    ren_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'soc_table_bkp'
